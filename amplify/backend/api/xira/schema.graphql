# type Task
#   @model
#   @auth(
#     rules: [
#       { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#       { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#     ]
#   ) {
#   id: ID!
#   title: String!
#   description: String
#   status: String
# }
# type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#   id: ID!
#   content: String!
# }

type User
  @model
  @auth(
    rules: [{ allow: owner, ownerField: "id", operations: [create, update] }]
  ) {
  id: ID!
  email: AWSEmail!
}

type Label
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        queries: null
        mutations: [create, update, delete]
      }
      { allow: private, queries: [get, list], mutations: null }
    ]
  ) {
  id: ID!
  name: String
  color: Int
  issues: [LabelIssues] @connection(keyName: "issuesByLabel", fields: ["id"])
}

type LabelIssues
  @model(queries: null)
  @key(
    name: "issuesByLabel"
    fields: ["labelID", "issueID"]
    queryField: "issuesByLabel"
  )
  @key(
    name: "labelsByIssue"
    fields: ["issueID", "labelID"]
    queryField: "labelsByIssue"
  )
  @auth(rules: [{ allow: owner, operations: [create, update] }]) {
  id: ID!
  labelID: ID!
  issueID: ID!

  label: Label! @connection(fields: ["labelID"])
  issue: Issue! @connection(fields: ["issueID"])
}

type Comment
  @model
  @key(
    name: "commentsByIssue"
    fields: ["issueID", "text"]
    queryField: "commentsByIssue"
  )
  @auth(rules: [{ allow: owner, operations: [create, update] }]) {
  id: ID!
  issueID: ID!
  text: String!
  issue: Issue! @connection(fields: ["issueID"])
}

type Issue
  @model
  @auth(rules: [{ allow: owner, operations: [create, update] }]) {
  id: ID!
  title: String!
  text: String!
  comments: [Comment] @connection(keyName: "commentsByIssue", fields: ["id"])
  labels: [LabelIssues] @connection(keyName: "labelsByIssue", fields: ["id"])
  status: String!
}
